// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repositories.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repositories.go -destination=internal/mocks/repository_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	entity "github.com/itsLeonB/cocoon/internal/entity"
	crud "github.com/itsLeonB/go-crud"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserProfileRepository is a mock of UserProfileRepository interface.
type MockUserProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfileRepositoryMockRecorder
	isgomock struct{}
}

// MockUserProfileRepositoryMockRecorder is the mock recorder for MockUserProfileRepository.
type MockUserProfileRepositoryMockRecorder struct {
	mock *MockUserProfileRepository
}

// NewMockUserProfileRepository creates a new mock instance.
func NewMockUserProfileRepository(ctrl *gomock.Controller) *MockUserProfileRepository {
	mock := &MockUserProfileRepository{ctrl: ctrl}
	mock.recorder = &MockUserProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProfileRepository) EXPECT() *MockUserProfileRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserProfileRepository) Delete(ctx context.Context, model entity.UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserProfileRepositoryMockRecorder) Delete(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserProfileRepository)(nil).Delete), ctx, model)
}

// DeleteMany mocks base method.
func (m *MockUserProfileRepository) DeleteMany(ctx context.Context, models []entity.UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", ctx, models)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockUserProfileRepositoryMockRecorder) DeleteMany(ctx, models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockUserProfileRepository)(nil).DeleteMany), ctx, models)
}

// FindAll mocks base method.
func (m *MockUserProfileRepository) FindAll(ctx context.Context, spec crud.Specification[entity.UserProfile]) ([]entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, spec)
	ret0, _ := ret[0].([]entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserProfileRepositoryMockRecorder) FindAll(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserProfileRepository)(nil).FindAll), ctx, spec)
}

// FindByIDs mocks base method.
func (m *MockUserProfileRepository) FindByIDs(ctx context.Context, ids []uuid.UUID) ([]entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockUserProfileRepositoryMockRecorder) FindByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockUserProfileRepository)(nil).FindByIDs), ctx, ids)
}

// FindFirst mocks base method.
func (m *MockUserProfileRepository) FindFirst(ctx context.Context, spec crud.Specification[entity.UserProfile]) (entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirst", ctx, spec)
	ret0, _ := ret[0].(entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirst indicates an expected call of FindFirst.
func (mr *MockUserProfileRepositoryMockRecorder) FindFirst(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirst", reflect.TypeOf((*MockUserProfileRepository)(nil).FindFirst), ctx, spec)
}

// GetGormInstance mocks base method.
func (m *MockUserProfileRepository) GetGormInstance(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGormInstance", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGormInstance indicates an expected call of GetGormInstance.
func (mr *MockUserProfileRepositoryMockRecorder) GetGormInstance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGormInstance", reflect.TypeOf((*MockUserProfileRepository)(nil).GetGormInstance), ctx)
}

// Insert mocks base method.
func (m *MockUserProfileRepository) Insert(ctx context.Context, model entity.UserProfile) (entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUserProfileRepositoryMockRecorder) Insert(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserProfileRepository)(nil).Insert), ctx, model)
}

// InsertMany mocks base method.
func (m *MockUserProfileRepository) InsertMany(ctx context.Context, models []entity.UserProfile) ([]entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", ctx, models)
	ret0, _ := ret[0].([]entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockUserProfileRepositoryMockRecorder) InsertMany(ctx, models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockUserProfileRepository)(nil).InsertMany), ctx, models)
}

// SearchByName mocks base method.
func (m *MockUserProfileRepository) SearchByName(ctx context.Context, query string, limit int) ([]entity.ProfileName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", ctx, query, limit)
	ret0, _ := ret[0].([]entity.ProfileName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockUserProfileRepositoryMockRecorder) SearchByName(ctx, query, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockUserProfileRepository)(nil).SearchByName), ctx, query, limit)
}

// Update mocks base method.
func (m *MockUserProfileRepository) Update(ctx context.Context, model entity.UserProfile) (entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserProfileRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserProfileRepository)(nil).Update), ctx, model)
}

// MockFriendshipRepository is a mock of FriendshipRepository interface.
type MockFriendshipRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFriendshipRepositoryMockRecorder
	isgomock struct{}
}

// MockFriendshipRepositoryMockRecorder is the mock recorder for MockFriendshipRepository.
type MockFriendshipRepositoryMockRecorder struct {
	mock *MockFriendshipRepository
}

// NewMockFriendshipRepository creates a new mock instance.
func NewMockFriendshipRepository(ctrl *gomock.Controller) *MockFriendshipRepository {
	mock := &MockFriendshipRepository{ctrl: ctrl}
	mock.recorder = &MockFriendshipRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendshipRepository) EXPECT() *MockFriendshipRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFriendshipRepository) Delete(ctx context.Context, model entity.Friendship) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFriendshipRepositoryMockRecorder) Delete(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFriendshipRepository)(nil).Delete), ctx, model)
}

// DeleteMany mocks base method.
func (m *MockFriendshipRepository) DeleteMany(ctx context.Context, models []entity.Friendship) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", ctx, models)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockFriendshipRepositoryMockRecorder) DeleteMany(ctx, models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockFriendshipRepository)(nil).DeleteMany), ctx, models)
}

// FindAll mocks base method.
func (m *MockFriendshipRepository) FindAll(ctx context.Context, spec crud.Specification[entity.Friendship]) ([]entity.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, spec)
	ret0, _ := ret[0].([]entity.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockFriendshipRepositoryMockRecorder) FindAll(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFriendshipRepository)(nil).FindAll), ctx, spec)
}

// FindAllBySpec mocks base method.
func (m *MockFriendshipRepository) FindAllBySpec(ctx context.Context, spec entity.FriendshipSpecification) ([]entity.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBySpec", ctx, spec)
	ret0, _ := ret[0].([]entity.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBySpec indicates an expected call of FindAllBySpec.
func (mr *MockFriendshipRepositoryMockRecorder) FindAllBySpec(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBySpec", reflect.TypeOf((*MockFriendshipRepository)(nil).FindAllBySpec), ctx, spec)
}

// FindByProfileIDs mocks base method.
func (m *MockFriendshipRepository) FindByProfileIDs(ctx context.Context, profileID1, profileID2 uuid.UUID) (entity.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProfileIDs", ctx, profileID1, profileID2)
	ret0, _ := ret[0].(entity.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProfileIDs indicates an expected call of FindByProfileIDs.
func (mr *MockFriendshipRepositoryMockRecorder) FindByProfileIDs(ctx, profileID1, profileID2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProfileIDs", reflect.TypeOf((*MockFriendshipRepository)(nil).FindByProfileIDs), ctx, profileID1, profileID2)
}

// FindFirst mocks base method.
func (m *MockFriendshipRepository) FindFirst(ctx context.Context, spec crud.Specification[entity.Friendship]) (entity.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirst", ctx, spec)
	ret0, _ := ret[0].(entity.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirst indicates an expected call of FindFirst.
func (mr *MockFriendshipRepositoryMockRecorder) FindFirst(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirst", reflect.TypeOf((*MockFriendshipRepository)(nil).FindFirst), ctx, spec)
}

// FindFirstBySpec mocks base method.
func (m *MockFriendshipRepository) FindFirstBySpec(ctx context.Context, spec entity.FriendshipSpecification) (entity.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstBySpec", ctx, spec)
	ret0, _ := ret[0].(entity.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstBySpec indicates an expected call of FindFirstBySpec.
func (mr *MockFriendshipRepositoryMockRecorder) FindFirstBySpec(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstBySpec", reflect.TypeOf((*MockFriendshipRepository)(nil).FindFirstBySpec), ctx, spec)
}

// GetGormInstance mocks base method.
func (m *MockFriendshipRepository) GetGormInstance(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGormInstance", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGormInstance indicates an expected call of GetGormInstance.
func (mr *MockFriendshipRepositoryMockRecorder) GetGormInstance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGormInstance", reflect.TypeOf((*MockFriendshipRepository)(nil).GetGormInstance), ctx)
}

// Insert mocks base method.
func (m *MockFriendshipRepository) Insert(ctx context.Context, model entity.Friendship) (entity.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(entity.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockFriendshipRepositoryMockRecorder) Insert(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFriendshipRepository)(nil).Insert), ctx, model)
}

// InsertMany mocks base method.
func (m *MockFriendshipRepository) InsertMany(ctx context.Context, models []entity.Friendship) ([]entity.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", ctx, models)
	ret0, _ := ret[0].([]entity.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockFriendshipRepositoryMockRecorder) InsertMany(ctx, models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockFriendshipRepository)(nil).InsertMany), ctx, models)
}

// Update mocks base method.
func (m *MockFriendshipRepository) Update(ctx context.Context, model entity.Friendship) (entity.Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(entity.Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFriendshipRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFriendshipRepository)(nil).Update), ctx, model)
}
