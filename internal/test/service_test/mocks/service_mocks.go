// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/services.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/services.go -destination=internal/test/service_test/mocks/service_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dto "github.com/itsLeonB/cocoon/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthService) Login(ctx context.Context, request dto.LoginRequest) (dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), ctx, request)
}

// Register mocks base method.
func (m *MockAuthService) Register(ctx context.Context, request dto.RegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), ctx, request)
}

// VerifyToken mocks base method.
func (m *MockAuthService) VerifyToken(ctx context.Context, token string) (dto.AuthData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(dto.AuthData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthServiceMockRecorder) VerifyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthService)(nil).VerifyToken), ctx, token)
}

// MockProfileService is a mock of ProfileService interface.
type MockProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceMockRecorder
	isgomock struct{}
}

// MockProfileServiceMockRecorder is the mock recorder for MockProfileService.
type MockProfileServiceMockRecorder struct {
	mock *MockProfileService
}

// NewMockProfileService creates a new mock instance.
func NewMockProfileService(ctrl *gomock.Controller) *MockProfileService {
	mock := &MockProfileService{ctrl: ctrl}
	mock.recorder = &MockProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileService) EXPECT() *MockProfileServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProfileService) Create(ctx context.Context, request dto.NewProfileRequest) (dto.ProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(dto.ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProfileServiceMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProfileService)(nil).Create), ctx, request)
}

// GetByID mocks base method.
func (m *MockProfileService) GetByID(ctx context.Context, id uuid.UUID) (dto.ProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(dto.ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProfileServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProfileService)(nil).GetByID), ctx, id)
}

// GetByIDs mocks base method.
func (m *MockProfileService) GetByIDs(ctx context.Context, ids []uuid.UUID) ([]dto.ProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ctx, ids)
	ret0, _ := ret[0].([]dto.ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockProfileServiceMockRecorder) GetByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockProfileService)(nil).GetByIDs), ctx, ids)
}

// Update mocks base method.
func (m *MockProfileService) Update(ctx context.Context, req dto.UpdateProfileRequest) (dto.ProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req)
	ret0, _ := ret[0].(dto.ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProfileServiceMockRecorder) Update(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProfileService)(nil).Update), ctx, req)
}

// MockFriendshipService is a mock of FriendshipService interface.
type MockFriendshipService struct {
	ctrl     *gomock.Controller
	recorder *MockFriendshipServiceMockRecorder
	isgomock struct{}
}

// MockFriendshipServiceMockRecorder is the mock recorder for MockFriendshipService.
type MockFriendshipServiceMockRecorder struct {
	mock *MockFriendshipService
}

// NewMockFriendshipService creates a new mock instance.
func NewMockFriendshipService(ctrl *gomock.Controller) *MockFriendshipService {
	mock := &MockFriendshipService{ctrl: ctrl}
	mock.recorder = &MockFriendshipServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendshipService) EXPECT() *MockFriendshipServiceMockRecorder {
	return m.recorder
}

// CreateAnonymous mocks base method.
func (m *MockFriendshipService) CreateAnonymous(ctx context.Context, request dto.NewAnonymousFriendshipRequest) (dto.FriendshipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnonymous", ctx, request)
	ret0, _ := ret[0].(dto.FriendshipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnonymous indicates an expected call of CreateAnonymous.
func (mr *MockFriendshipServiceMockRecorder) CreateAnonymous(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnonymous", reflect.TypeOf((*MockFriendshipService)(nil).CreateAnonymous), ctx, request)
}

// GetAll mocks base method.
func (m *MockFriendshipService) GetAll(ctx context.Context, profileID uuid.UUID) ([]dto.FriendshipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, profileID)
	ret0, _ := ret[0].([]dto.FriendshipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFriendshipServiceMockRecorder) GetAll(ctx, profileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFriendshipService)(nil).GetAll), ctx, profileID)
}

// GetDetails mocks base method.
func (m *MockFriendshipService) GetDetails(ctx context.Context, profileID, friendshipID uuid.UUID) (dto.FriendDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetails", ctx, profileID, friendshipID)
	ret0, _ := ret[0].(dto.FriendDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetails indicates an expected call of GetDetails.
func (mr *MockFriendshipServiceMockRecorder) GetDetails(ctx, profileID, friendshipID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetails", reflect.TypeOf((*MockFriendshipService)(nil).GetDetails), ctx, profileID, friendshipID)
}

// IsFriends mocks base method.
func (m *MockFriendshipService) IsFriends(ctx context.Context, profileID1, profileID2 uuid.UUID) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFriends", ctx, profileID1, profileID2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsFriends indicates an expected call of IsFriends.
func (mr *MockFriendshipServiceMockRecorder) IsFriends(ctx, profileID1, profileID2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFriends", reflect.TypeOf((*MockFriendshipService)(nil).IsFriends), ctx, profileID1, profileID2)
}
